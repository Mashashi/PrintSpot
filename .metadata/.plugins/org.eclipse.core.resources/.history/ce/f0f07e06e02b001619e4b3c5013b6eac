package de.dto;

import java.text.ParseException;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import de.Utils;
import de.ValidationException;

@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Customer")
public class NewCustomer {
	
	@XmlElement(name = "name", required = true)
    public String name;
	@XmlElement(name = "email", required = true)
    public String email;
	@XmlElement(name = "birthday")
    public String birthday;
	@XmlElement(name = "address", required = true)
    public String address;
	@XmlElement(name = "taxNum", required = true)
    public String tax_num;
	
    public NewCustomer() {}

	public NewCustomer(String name, String email, String birthday, String address, String tax_num) {
		super();
		this.name = name;
		this.email = email;
		this.birthday = birthday;
		this.address = address;
		this.tax_num = tax_num;
	}
    
	
	public void validate() throws ValidationException{
		StringBuffer report = new StringBuffer("");
		try {
			Utils.parseDate(birthday);
		} catch (ParseException e) {
			Utils.parseDateError(report, "birthday", birthday);
		}
		if(!report.toString().equals("")) 
			throw new ValidationException(report);
	}
	
	/*public String validate(){
		StringBuffer report = new StringBuffer("");
		for(Field f: this.getClass().getDeclaredFields()){
			try {
				if(f.get(this)==null)
					report.append("Field "+f.getAnnotation(XmlElement.class).name()+" can not be null");
			} catch (IllegalArgumentException|IllegalAccessException e) {
				throw new RuntimeException(e);
			}
		}
		return report.toString();
	}*/
	
	
	
}
